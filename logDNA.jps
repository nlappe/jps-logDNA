_info : 'https://docs.cloudscripting.com/1.6.2/'
version: 1.6.2
build: 20200122
type: update
name: 'logDNA'
id: 'logDNA'
homepage: https://jps.layershift.com/logDNA
baseUrl: https://raw.githubusercontent.com/nlappe/jps-logDNA/master
logo: /images/logDNA.png?_r=${fn.random}

categories:
 - apps/others

description:
  text: /texts/description.md
  short: LogDNA is the easiest centralized log management software.

targetNodes:
  nodeGroup: '*'

globals:
  message: ""

settings:
  main:
    fields:
    - type: string
      name: ingestionKey
      caption: Ingestion Key
      hideLabel: false
      required: true
    - type: string
      name: logDNATag
      caption: Tags
      hideLabel: false
    - type: text
      name: logPaths
      caption: Logs to monitor. 1/line
      default: "#lines starting with # are ignored\n#Nginx load balancer\n#/var/log/nginx/*access_log\n#/var/log/nginx/*error_log\n#Tomcat nodes\n#/opt/tomcat/logs/catalina.out\n#/opt/tomcat/logs"
    - type: text
      name: excludePaths
      caption: exclude files to monitor. 1/line
      default: "#lines starting with # are ignored\n/var/log/messages\n/var/log/secure\n/var/log/maillog\n/var/log/jem.log"

    
menu:
  - caption: Restart LogDNA
    loadingText: Restarting..
    confirmText: Are you sure you wish to restart LogDNA?
    action: restartLogDNA
  - caption: Configure
    loadingText: Updating..
    settings: main
    confirmText: Are you sure you wish to configure logDNA?
    action: install
    successText: /text/success.md
  - caption: Show Configuration File
    loadingText: Checking..
    confirmText: Are you sure you wish to see the content of /etc/logdna.conf?
    action: checkLogDNAConf

buttons:
  - caption: Status
    loadingText: Checking..
    action: checkLogDNAStatus
  - caption: Dashboard
    href: https://app.logdna.com/account/signin
  
onAfterRedeployContainer:
  install:
    name: Install Action

onAfterAddNode:
  install:
    name: Install Action

onAfterCloneNodes:
  install:
    name: Install Action

onInstall:
  install:
    name: Install Action

onUninstall:
  cmd [${targetNodes.nodeGroup}]:
    - /etc/init.d/logdna-agent stop;
    - chkconfig --del logdna-agent;
    - yum -y remove logdna-agent;
    - rm -f /etc/sudoers.d/logDNA;
    - rm -f /etc/profile.d/logdna-agent.sh;
  sayYes: true
  user: root

actions:
  appendMessage:
    setGlobals:
      message: ${globals.message}${this}

  install:
    - setGlobals:
      - message: ""
    - forEach(node:targetNodes):
      - cmd [${@node.id}]:
          - echo -e "\n\nOn node ${@node.id}";
          - which rpm 2>/dev/null >/dev/null; if [ $? -gt 0 ]; then echo -e "Issue:\nrpm not found"; exit 0; fi;
          - which systemctl 2>/dev/null >/dev/null; if [ $? -gt 0 ]; then echo -e "Issue:\nsystemctl not found"; exit 0; fi;
          - rpm --import https://repo.logdna.com/logdna.gpg;
          - echo '[logdna]' > /etc/yum.repos.d/logdna.repo;
          - echo 'name=LogDNA packages' >> /etc/yum.repos.d/logdna.repo;
          - echo 'baseurl=https://repo.logdna.com/el6/' >> /etc/yum.repos.d/logdna.repo;
          - echo 'enabled=1' >> /etc/yum.repos.d/logdna.repo;
          - echo 'gpgcheck=1' >> /etc/yum.repos.d/logdna.repo;
          - echo 'gpgkey=https://repo.logdna.com/logdna.gpg' >> /etc/yum.repos.d/logdna.repo;
          - yum -y install logdna-agent; if [ $? -gt 0 ]; then echo -e "\nIssue:\nCan't install logdna-agent"; exit 0; fi;
          - echo '' > /etc/logdna.conf
          - logdna-agent -k "${settings.ingestionKey}";
          - logdna-agent -s hostname=$(hostname);
          - logdna-agent -u logdir;
          - for log in $(printf "${settings.logPaths}" | egrep -v "#|^/root|^/etc|^/var/lib"); do logdna-agent -d "$log"; if [ $? -gt 0 ]; then echo -e "Issue:\nFailed to add $log"; exit 0; fi; done;
          - for exclude in $(printf "${settings.excludePaths}" | egrep -v "#|^/root|^/etc|^/var/lib"); do logdna-agent -e "$exclude"; if [ $? -gt 0 ]; then echo -e "Issue:\nFailed to exclude $exclude"; exit 0; fi; done;
          - logdna-agent -u tags;
          - if [ "" != "${settings.logDNATag}" ]; then logdna-agent -t "${settings.logDNATag}"; if [ $? -gt 0 ]; then echo -e "Issue:\nFailed to set tag ${settings.logDNATag}"; exit 0; fi; fi;
          - chown jelastic /etc/logdna.conf;
          - chkconfig --add logdna-agent;
          - chkconfig --level 2345 logdna-agent on;
          - /etc/init.d/logdna-agent restart;
          - curl -fsSL '${baseUrl}/scripts/sudo_logDNA' -o /etc/sudoers.d/logDNA;
          - chmod 640 /etc/sudoers.d/logDNA;
          - curl -fsSL '${baseUrl}/scripts/profile_logdna-agent' -o /etc/profile.d/logdna-agent.sh;
        sayYes: true
        user: root
      - appendMessage: ${response.out}
    - if (globals.message.indexOf("Issue") !== -1):
        message:  ${globals.message}
        script: |
          return {result: 2309, message: message.replace(/\n/g, '  \n')}

  restartLogDNA:
    - setGlobals:
      - message: ""
    - forEach(node:targetNodes):
      - cmd [${@node.id}]:
          - /etc/init.d/logdna-agent restart 2>&1 > /dev/null;
          - sleep 5;
          - /etc/init.d/logdna-agent status 2>&1 > /dev/null;
          - if [ $? -gt 0 ]; then echo -en " - On node ${@node.id}\nStatus =  "; /etc/init.d/logdna-agent status; echo -e " \n\n"; fi;
        user: root
      - appendMessage: ${response.out}
    - if (globals.message.length > 0):
        return:
          type: error
          message: '${globals.message}'
    - return:
        type: success
        message: 'LogDNA restart complete'

  checkLogDNAStatus:
    - setGlobals:
      - message: ""
    - forEach(node:targetNodes):
      - cmd [${@node.id}]:
          - echo -en " - On node ${@node.id}\nStatus =  ";
          - /etc/init.d/logdna-agent status;
          - echo -e " \n\n";
        user: root
      - appendMessage: ${response.out}
    - message: ${globals.message}
      script: |
        return {result: 2308, message: message.replace(/\n/g, '  \n')}

  checkLogDNAConf:
    - setGlobals:
      - message: ""
    - forEach(node:targetNodes):
      - cmd [${@node.id}]:
          - echo -e "\n - On node ${@node.id}\ncat /etc/logdna.conf";
          - cat /etc/logdna.conf;
        user: root
      - appendMessage: ${response.out}
    - message: ${globals.message}
      script: |
        return {result: 2308, message: message.replace(/\n/g, '  \n')}

responses:
  2308:
    type: success
  
  2309:
    type: error

success: /texts/success.md
